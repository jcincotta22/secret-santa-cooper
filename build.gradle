apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'war'

mainClassName = 'christmas.Bootstrap'
sourceCompatibility = 1.8
targetCompatibility = 1.8

buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "jp.classmethod.aws:gradle-aws-plugin:0.30"
        classpath "com.moowork.gradle:gradle-node-plugin:1.2.0"
    }
}

apply plugin: 'jp.classmethod.aws'
apply plugin: 'com.moowork.node'

aws {
    profileName = 'default'
    region = 'us-west-2b'
}

apply plugin: 'jp.classmethod.aws.ec2'

// You can overwrite default credentials and region settings like this:
// ec2 {
//   profileName 'another-credentials-profile-name' // optional
//   region = 'us-east-1'
// }

task stopBastion(type: jp.classmethod.aws.gradle.ec2.AmazonEC2StopInstanceTask) {
    instanceIds += 'i-0cba70c3c6a3ed897'
}

task startBastion(type: jp.classmethod.aws.gradle.ec2.AmazonEC2StartInstanceTask) {
    instanceIds += 'i-0cba70c3c6a3ed897'
}

repositories {
    mavenCentral()
}

dependencies {
    compile "com.sparkjava:spark-core:2.7.2"
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.7'
    testCompile "junit:junit:4.12"
    compile "org.slf4j:slf4j-simple:1.7.7"
    compile 'com.google.code.gson:gson:2.8.5'
    compile 'org.mongodb:mongo-java-driver:2.12.3'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.9.4'
    compile group: 'log4j', name: 'log4j', version: '1.2.16'
//    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.5'
//    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.5'

}

node {
    version = '10.9.0'
    npmVersion = '6.2.0'
    download = true
    // distBaseUrl = Custom artifactory location here for node/npm.
}

jar {
    baseName = 'secret-santa-gradle'
    version =  '0.1.1'
    manifest {
        attributes("secret-santa": "secret-santa",
                "Implementation-Version": "1.0.0",
                "Main-Class": "christmas.Bootstrap"
        )
    }

    from('webapp/build') {
        into 'webapp'
    }

    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}


node {
    version = '6.10.2'
    npmVersion = '3.10.6'
    download = true
    workDir = file("${project.buildDir}/node")
    nodeModulesDir = file("${project.projectDir}/webapp")
}

task npmStart(type: NpmTask) {
    // install the express package only
    args = ['start']
}

npmStart.dependsOn(npm_install)

